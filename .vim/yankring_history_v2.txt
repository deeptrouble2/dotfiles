",v
p,v
u,v
^i[left;0;0;/home/deepak/.config/wmfs/icons/status/net_up_01.png]^s[left;\#A6D4E0; ${upspeed}]\^s[left;\#444444; |]\,V
^s[left;\#444444; |]\,V
^i[left;0;0;/home/deepak/.config/wmfs/icons/status/net_up_01.png]^s[left;\#A6D4E0; ${upspeed}]\,V
1,v
 ,v
m,v
e,v
_,v
o,v
t,v
{,v
$,v
},v
a,v
n,v
w,v
d,v
g,v
.,v
x,v
pacman,v
pacman.png]^s[left;\#A6D4E0; ${top_mem name 1}${top_mem mem 1}]\,v
^i[left;0;0;/home/deepak/.config/wmfs/icons/status/pacman.png]^s[left;\#A6D4E0; ${top_mem name 1}${top_mem mem 1}]\,V
^i[left;0;0;/home/deepak/.config/wmfs/icons/status/net_down_01.png]^s[left;\#A6D4E0; ${downspeed}]\,V
^i[left;0;0;/home/deepak/.config/wmfs/icons/status/net_up_01.png]^g[left;20;20;\#A6D4E0; ${upspeed}]\,V
0,v
minimum_size 1600,V
upspeed,v
eth1,v
double_buffer yes,V
top_mem,v
/,v
c,v
(net)	,v
/home/deepak/.colors/Terminal/colored,v
./bundle/xterm-color-table.vim/.git,v
https://github.com/deeptrouble2/dotfiles,v
toggle_free,v
  [key] mod = { "Super" }   key = "f" func = "client_toggle_free" [/key],V
,V
          client_focus(c);,V
        || (c = client_gb_frame(W->last_clicked_barwin->win))),V
     if((c = client_gb_titlebar(W->last_clicked_barwin->win)),V
     struct client *c;,V
     (void)cmd;,V
     struct client *c;     (void)cmd;     if(!(W->client))          return;     W->client->flags ^= CLIENT_FREE;     layout_client(W->client);     /* Set tabbed client of toggled client as free */     if(W->client->flags & CLIENT_TABMASTER)     {          SLIST_FOREACH(c, &W->client->tag->clients, tnext)               if(c->tabmaster == W->client && c != W->client)                    c->flags ^= CLIENT_FREE;     },v
focus_click,v
voiduicb_client_focus_click(Uicb cmd){     (void)cmd;     struct client *c;     if((c = client_gb_titlebar(W->last_clicked_barwin->win))        || (c = client_gb_frame(W->last_clicked_barwin->win)))          client_focus(c);},v
void uicb_client_focus_click(Uicb);,V
tab_next_opened,v
     { "client_tab_next_opened",   uicb_client_tab_next_opened },,V
86400,v
3,v
            type uint32 { range "30..86400"; },V
*,v
reporters,v
        memset(intf->reporters, 0, sizeof(intf->reporters));,V
intf->is_rogue && ,v
is_terminating,v
unsanctioned,v
 ,V
            PICKLE_DICT_BOOL(pk, "is_interferer", ,V
),v
(,v
;intf->is_rogue) num_rogues++;,v
(intf->rssi*-1 >= rapcfg.rssi_threshold));,v
rogues,v
    int num_rogues = 0;    struct rapintf *intf = NULL;    int iter = -1;    while ((intf = iterate_intf(intf, &iter)) != NULL) {        if (intf->is_rogue) num_rogues++;    } ,v
            PICKLE_DICT_BOOL(pk, "is_interferer", (intf->rssi*-1 >= rapcfg.rssi_threshold));,V
static int num_interferers = 0;,V
static int num_rogues = 0;,V
count,v
channel == channel) count++;,v
struct rapintf *intf = NULL;    int iter = -1;    while ((intf = iterate_intf(intf, &iter)) != NULL) {        if (intf->channel == channel) count++;    },v
    struct rapintf *intf = NULL;    int iter = -1;,V
static int num_unsanctioned = 0;,V
    char *buffer = NULL;,V
v["count"][idx],v
				$(TOP)/src/sys/ssm/inc \,V
buffer[100];,v
, sizeof(buffer));,v
INCDIRS     +=  $(TOP)/src/sys/cc2/super ,V
(TOP)/src/sys/cc2/rim/inc \,V
$(TOP)/src/sys/ssm/inc \,v
                $(TOP)/src/sys/cc2/rim/inc \,V
$(TOP)/src/sys/cc2/rim/inc \,v
$(TOP)/src/sys/cc2/cryptlib \,v
				$(TOP)/src/sys/cc2/cryptlib \,V
               $(TOP)/src/sys/cc2/rim/inc \,V
#include "stats/mmi.h",V
s,v
    num_stats_intf = 0;,V
    struct rapintf *intf = NULL;    int iter = -1;    num_stats_intf = 0;    while ((intf = iterate_intf(intf, &iter)) != NULL) {,V
Too slow, fix this ,v
 {,v
size_t rap_pickle_channel_map(int channel, DOMAIN_POOL* domain, char** buffer) {,V
uint16_t,v
